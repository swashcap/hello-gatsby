{"componentChunkName":"component---src-components-internal-template-tsx","path":"/components/Alert/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Alert\",\n  \"description\": \"The Alert component informs users of change in the underlying system; user\\ninteraction or a change in application state can surface the component.\\n\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Alert has three variations ensure it covers multiple interaction patterns: success, warning, and error.\"), mdx(\"h3\", null, \"Related\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#\"\n  }), \"Interaction design guidelines \\u2197\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#\"\n  }), \"Alert design specifications \\u2197\"))), mdx(\"h2\", null, \"Usage\"), mdx(\"p\", null, \"Import the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Alert\"), \" component into a React component in your project:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\"\n  }), \"import {Alert} from 'demo-library';\\n\")), mdx(\"p\", null, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Alert\"), \" by passing children:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\"\n  }), \"import React from 'react';\\nimport {Alert} from 'demo-library';\\n\\nexport const MyComponent: React.FC<any> = () => {\\n  return (\\n    <div>\\n      <p>Uh-oh<p>\\n      <Alert>\\n        <strong>Warning:</strong>\\n        This is a cautionary alert.\\n      </Alert>\\n    </div>\\n  );\\n}\\n\")), mdx(\"h2\", null, \"Variants\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Alert\"), \" comes with three variations, which are set via the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"variant\"), \" property.\"), mdx(\"h3\", null, \"Success\"), mdx(\"p\", null, \"Use to signify a positive or successful interaction. This is the default Alert.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }), \"<Alert variant=\\\"success\\\">\\n  <strong>Success!</strong> This is a positive alert.\\n</Alert>\\n\")), mdx(\"h3\", null, \"Warning\"), mdx(\"p\", null, \"Use to indicate bring awareness of a non-critical, potentially negative information.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }), \"<Alert variant=\\\"warning\\\">\\n  <strong>Warning:</strong> This is a cautionary alert.\\n</Alert>\\n\")), mdx(\"h3\", null, \"Error\"), mdx(\"p\", null, \"Use to convey a negative or errorful interaction or state.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }), \"<Alert variant=\\\"error\\\">\\n  <strong>Error!</strong> This is a negative alert.\\n</Alert>\\n\")), mdx(\"h2\", null, \"Closeable\"), mdx(\"p\", null, \"Pass an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onClose\"), \" property to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Alert\"), \" to display a close button:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }), \"<Alert onClose={console.log} variant=\\\"warning\\\">\\n  This alert is closeable.\\n</Alert>\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Alert\"), \" component has a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"focusButton\"), \" method that will call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HTMLElement.focus()\"), \" on the button.\"), mdx(\"h2\", null, \"Accessibility\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Alert\"), \" component has a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"role=\\\"alert\\\"\"), \" property, which covers the WCAG requirement.\"), mdx(\"h3\", null, \"Related\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_alert_role/\"\n  }), \"\\\"Using the alert role\\\" on MDN \\u2197\"))));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"docgen":"{\"description\":\"\",\"displayName\":\"Alert\",\"methods\":[{\"description\":\"Focus the Alert's button if present.\",\"docblock\":\"Focus the Alert's button if present.\\n@public\",\"modifiers\":[],\"name\":\"focusButton\",\"params\":[{\"description\":null,\"name\":\"options?\",\"type\":{\"name\":\"FocusOptions | undefined\"}}],\"returns\":null}],\"props\":{\"onClose\":{\"defaultValue\":null,\"description\":\"`Alert` displays a close button when this property is passed. Response to user-initiated closes by adding an event handler.\",\"name\":\"onClose\",\"parent\":{\"fileName\":\"hello-gatsby/src/components/external/Alert.tsx\",\"name\":\"AlertProps\"},\"required\":false,\"type\":{\"name\":\"((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined\"}},\"variant\":{\"defaultValue\":{\"value\":\"success\"},\"description\":\"The alert's visual variant, representing the meaning of the alert.\",\"name\":\"variant\",\"parent\":{\"fileName\":\"hello-gatsby/src/components/external/Alert.tsx\",\"name\":\"AlertProps\"},\"required\":false,\"type\":{\"name\":\"\\\"success\\\" | \\\"error\\\" | \\\"warning\\\" | undefined\"}}}}"},"frontmatter":{"description":"The Alert component informs users of change in the underlying system; user\ninteraction or a change in application state can surface the component.\n","title":"Alert"},"tableOfContents":{"items":[{"url":"#usage","title":"Usage"},{"url":"#variants","title":"Variants"},{"url":"#closeable","title":"Closeable"},{"url":"#accessibility","title":"Accessibility"}]}}},"pageContext":{"slug":"/components/Alert/"}}}